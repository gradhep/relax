name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
    - master
    - main
    - develop
  release:
    types:
      - published

jobs:
  pre-commit:
    name: Format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
    - uses: pre-commit/action@v3.0.0
      with:
        extra_args: --hook-stage manual --all-files

  checks:
    name: Check Python ${{ matrix.python-version }} on ${{ matrix.runs-on }}
    runs-on: ${{ matrix.runs-on }}
    needs: [pre-commit]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        runs-on: [ubuntu-latest]
        include:
          - runs-on: macos-latest
            python-version: "3.10"

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install package
      run: python -m pip install .[test]

    - name: Test package
      run: python -m pytest -ra

    - name: Upload coverage to codecov
      if: matrix.runs-on == 'ubuntu-latest'
      uses: codecov/codecov-action@v3.1.1
      with:
        #token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests-${{ matrix.python-version }}
        name: codecov-umbrella
        fail_ci_if_error: true

    - name: Run examples
      run: |
        cd examples
        python -m pip install -r requirements.txt
        python -m pip install jupyter nbclient
        jupyter execute *.ipynb

  dist:
    name: Distribution build
    runs-on: ubuntu-latest
    needs: [pre-commit]

    steps:
    - uses: actions/checkout@v3

    - name: Build sdist and wheel
      run: pipx run build

    - uses: actions/upload-artifact@v3
      with:
        path: dist

    - name: Check products
      run: pipx run twine check dist/*

    - uses: pypa/gh-action-pypi-publish@v1.6.1
      if: github.event_name == 'release' && github.event.action == 'published' && github.repository == 'gradhep/relaxed'
      with:
        user: __token__
        # Remember to generate this and set it in "GitHub Secrets"
        password: ${{ secrets.pypi_password }}
        print_hash: true
